"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Path Integral Engine v3.0
======================================
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞

–ó–∞–ø—É—Å–∫: python engine_demo.py
"""

import sys
import time
import numpy as np
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–≤–∏–∂–∫–∞
sys.path.append(str(Path(__file__).parent))

try:
    from path_integral_engine import (
        PathIntegralEngine, 
        PathIntegralConfig,
        QualityPreset,
        RenderingMode,
        RenderingBackend,
        create_interactive_engine,
        create_production_engine,
        create_preview_engine
    )
    import torch
    TORCH_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install torch numpy")
    TORCH_AVAILABLE = False


def demo_scene_sdf(points):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    if not hasattr(points, 'device'):
        # Fallback –¥–ª—è CPU
        return np.ones(points.shape[:-1]) * 0.5
        
    device = points.device
    
    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞
    sphere1 = torch.norm(points - torch.tensor([0.0, 0.0, 0.0], device=device), dim=-1) - 1.0
    
    # –°—Ñ–µ—Ä–∞ —Å–ø—Ä–∞–≤–∞
    sphere2 = torch.norm(points - torch.tensor([2.5, 0.0, 0.5], device=device), dim=-1) - 0.8
    
    # –°—Ñ–µ—Ä–∞ —Å–ª–µ–≤–∞
    sphere3 = torch.norm(points - torch.tensor([-2.0, 0.5, -0.5], device=device), dim=-1) - 0.6
    
    # –°—Ñ–µ—Ä–∞ —Å–≤–µ—Ä—Ö—É
    sphere4 = torch.norm(points - torch.tensor([0.0, 2.0, 0.0], device=device), dim=-1) - 0.7
    
    # –ü–ª–æ—Å–∫–æ—Å—Ç—å-–ø–æ–ª
    plane = points[..., 1] + 1.8
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
    scene = torch.minimum(
        torch.minimum(
            torch.minimum(
                torch.minimum(sphere1, sphere2), 
                sphere3
            ), 
            sphere4
        ), 
        plane
    )
    
    return scene


def save_image(img_array, filename, info):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        from PIL import Image
        
        if len(img_array.shape) == 3:  # RGB
            img = Image.fromarray(img_array)
        else:  # Grayscale
            img = Image.fromarray(img_array, mode='L')
            
        img.save(filename)
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        print(f"   –†–∞–∑–º–µ—Ä: {img_array.shape}")
        print(f"   FPS: {info['fps']:.2f}")
        print(f"   SPP: {info['spp']}")
        print(f"   Backend: {info['backend']}")
        print(f"   –†–µ–∂–∏–º: {info['mode']}")
        print()
        
    except ImportError:
        print("‚ö†Ô∏è  PIL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        print(f"–ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_array.shape}, FPS: {info['fps']:.2f}")


def demo_basic_usage():
    """–ë–∞–∑–æ–≤–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–≤–∏–∂–∫–∞"""
    print("üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    engine = create_interactive_engine()
    print(f"–î–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω: {engine.get_info()}")
    
    # –ü–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
    camera_positions = [
        ([0.0, 1.0, -4.0], [0.0, 0.0, 0.0], "front"),
        ([4.0, 2.0, 0.0], [0.0, 0.0, 0.0], "side"),
        ([2.0, 3.0, 2.0], [0.0, 0.0, 0.0], "angle"),
    ]
    
    for i, (cam_pos, cam_target, view_name) in enumerate(camera_positions):
        print(f"üé• –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–¥–∞ '{view_name}'...")
        
        start_time = time.time()
        img, info = engine.render(demo_scene_sdf, cam_pos, cam_target)
        render_time = time.time() - start_time
        
        filename = f"demo_basic_{view_name}.png"
        save_image(img, filename, info)
        print(f"   –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞: {render_time:.2f}—Å\n")


def demo_quality_presets():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("=" * 40)
    
    presets = [
        (QualityPreset.PREVIEW, "preview"),
        (QualityPreset.INTERACTIVE, "interactive"),
        (QualityPreset.PRODUCTION, "production"),
    ]
    
    camera_pos = [3.0, 2.0, -3.0]
    camera_target = [0.0, 0.0, 0.0]
    
    for preset, name in presets:
        print(f"üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–æ–π '{name}'...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = PathIntegralConfig.from_preset(preset)
        engine = PathIntegralEngine(config)
        
        start_time = time.time()
        img, info = engine.render(demo_scene_sdf, camera_pos, camera_target)
        render_time = time.time() - start_time
        
        filename = f"demo_quality_{name}.png"
        save_image(img, filename, info)
        print(f"   –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞: {render_time:.2f}—Å")
        print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {config.width}x{config.height}")
        print(f"   SPP: {config.spp}\n")


def demo_rendering_modes():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞"""
    print("üåà –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞")
    print("=" * 40)
    
    engine = create_interactive_engine()
    camera_pos = [2.0, 1.5, -3.0]
    camera_target = [0.0, 0.0, 0.0]
    
    # RGB —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    print("üî¥üü¢üîµ RGB –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º...")
    engine.switch_rendering_mode(RenderingMode.RGB_SPECTRAL)
    img_rgb, info_rgb = engine.render(demo_scene_sdf, camera_pos, camera_target)
    save_image(img_rgb, "demo_mode_rgb_spectral.png", info_rgb)
    
    # –ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π —Ä–µ–∂–∏–º  
    print("‚ö´ –ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π —Ä–µ–∂–∏–º...")
    engine.switch_rendering_mode(RenderingMode.MONOCHROME)
    img_mono, info_mono = engine.render(demo_scene_sdf, camera_pos, camera_target)
    save_image(img_mono, "demo_mode_monochrome.png", info_mono)


def demo_custom_config():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("‚öôÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = PathIntegralConfig()
    config.width = 768
    config.height = 768
    config.spp = 32
    config.segments = 6
    config.rendering_mode = RenderingMode.RGB_SPECTRAL
    config.target_fps = 5.0  # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    config.adaptive_quality = False  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–ª–∏–Ω—ã –≤–æ–ª–Ω (–±–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞)
    config.wavelengths['red'] = 0.680    # –ë–æ–ª–µ–µ –∫—Ä–∞—Å–Ω—ã–π
    config.wavelengths['green'] = 0.520  # –ë–æ–ª–µ–µ –∑–µ–ª–µ–Ω—ã–π
    config.wavelengths['blue'] = 0.430   # –ë–æ–ª–µ–µ —Å–∏–Ω–∏–π
    
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {config.width}x{config.height}")
    print(f"  SPP: {config.spp}")
    print(f"  –°–µ–≥–º–µ–Ω—Ç—ã: {config.segments}")
    print(f"  RGB –¥–ª–∏–Ω—ã –≤–æ–ª–Ω: R={config.wavelengths['red']}Œºm, "
          f"G={config.wavelengths['green']}Œºm, B={config.wavelengths['blue']}Œºm")
    
    engine = PathIntegralEngine(config)
    
    camera_pos = [3.0, 2.5, -2.5]
    camera_target = [0.0, 0.0, 0.0]
    
    print("\nüé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
    start_time = time.time()
    img, info = engine.render(demo_scene_sdf, camera_pos, camera_target)
    render_time = time.time() - start_time
    
    save_image(img, "demo_custom_config.png", info)
    print(f"–í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞: {render_time:.2f}—Å")


def demo_performance_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 40)
    
    camera_pos = [2.0, 1.0, -3.0]
    camera_target = [0.0, 0.0, 0.0]
    
    test_configs = [
        ("–ë—ã—Å—Ç—Ä—ã–π", QualityPreset.PREVIEW),
        ("–°—Ä–µ–¥–Ω–∏–π", QualityPreset.INTERACTIVE),
        ("–ú–µ–¥–ª–µ–Ω–Ω—ã–π", QualityPreset.PRODUCTION),
    ]
    
    results = []
    
    for name, preset in test_configs:
        config = PathIntegralConfig.from_preset(preset)
        engine = PathIntegralEngine(config)
        
        print(f"‚è±Ô∏è  –¢–µ—Å—Ç '{name}' ({config.width}x{config.height}, {config.spp} SPP)...")
        
        # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥–æ–Ω–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        times = []
        for i in range(3):
            start_time = time.time()
            img, info = engine.render(demo_scene_sdf, camera_pos, camera_target)
            render_time = time.time() - start_time
            times.append(render_time)
            
        avg_time = np.mean(times)
        fps = 1.0 / avg_time
        
        results.append((name, config.width * config.height, config.spp, avg_time, fps))
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å, FPS: {fps:.2f}")
    
    print("\nüìà –°–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print(f"{'–†–µ–∂–∏–º':<10} {'–ü–∏–∫—Å–µ–ª–∏':<10} {'SPP':<6} {'–í—Ä–µ–º—è':<8} {'FPS':<8}")
    print("-" * 50)
    for name, pixels, spp, time_val, fps in results:
        print(f"{name:<10} {pixels:<10} {spp:<6} {time_val:<8.2f} {fps:<8.2f}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ Path Integral Engine v3.0 - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 50)
    
    if not TORCH_AVAILABLE:
        print("‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ PyTorch")
        return
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU
    if torch.backends.mps.is_available():
        print("‚úÖ Apple Silicon GPU (MPS) –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print("‚ö†Ô∏è  MPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
    
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
        demo_basic_usage()
        demo_quality_presets()
        demo_rendering_modes()
        demo_custom_config()
        demo_performance_comparison()
        
        print("üéâ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        print("   - demo_basic_*.png")
        print("   - demo_quality_*.png") 
        print("   - demo_mode_*.png")
        print("   - demo_custom_config.png")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
