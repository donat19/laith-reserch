"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Path Integral Engine v3.0
======================================
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞

–ó–∞–ø—É—Å–∫: python engine_demo.py
"""

import sys
import time
import math
import numpy as np
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–≤–∏–∂–∫–∞
sys.path.append(str(Path(__file__).    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    normalization_data_path = os.path.join(output_dir, "normalization_data.pkl")
    engine.export_normalization_data(normalization_data_path)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏...")
    create_final_composite_image(engine, demo_scene_sdf, camera_pos, camera_target, output_dir)
    
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
    norm_info = engine.get_info().get('normalization', {})
    print(f"   –ö–∞–¥—Ä–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: {norm_info.get('frames_accumulated', 0)}")
    print(f"   –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: {norm_info.get('total_frames', 0)}")
    print(f"   –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {'–î–∞' if norm_info.get('is_ready', False) else '–ù–µ—Ç'}")
    print(f"   –°–∏–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: {norm_info.get('strength', 0.0):.1f}")


def create_final_composite_image(engine, scene_sdf, camera_pos, camera_target, output_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å–∏–ª—É –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    original_strength = engine.config.normalization_strength
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–∞–∑–Ω–æ–π —Å–∏–ª–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    strengths = [0.0, 0.25, 0.5, 0.75, 1.0]
    images = []
    
    print("   –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏...")
    for i, strength in enumerate(strengths):
        print(f"     –°–∏–ª–∞ {strength:.2f} ({i+1}/{len(strengths)})")
        engine.set_normalization_strength(strength)
        img, info = engine.render(scene_sdf, camera_pos, camera_target)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if len(img.shape) == 3 and img.dtype == np.uint8:
            img_normalized = img.astype(np.float32) / 255.0
        else:
            img_normalized = img
            
        images.append(img_normalized)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å–∏–ª—É
    engine.set_normalization_strength(original_strength)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    interference_combined = engine.get_interference_pattern('combined')
    interference_red = engine.get_interference_pattern('red')
    interference_green = engine.get_interference_pattern('green')
    interference_blue = engine.get_interference_pattern('blue')
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    try:
        from PIL import Image, ImageDraw, ImageFont
        import matplotlib.pyplot as plt
        import matplotlib.colors as mcolors
        
        # –†–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ç–∞
        img_height, img_width = images[0].shape[:2]
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é –∫–æ–º–ø–æ–∑–∏—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        composite_width = img_width * 5  # 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        composite_height = img_height * 3  # 3 —Ä—è–¥–∞
        
        composite = np.ones((composite_height, composite_width, 3), dtype=np.float32)
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥: –≥—Ä–∞–¥–∏–µ–Ω—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        for i, img in enumerate(images):
            x_start = i * img_width
            x_end = x_start + img_width
            
            if len(img.shape) == 3:
                composite[0:img_height, x_start:x_end, :] = img
            else:
                # –ú–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –¥—É–±–ª–∏—Ä—É–µ–º –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
                composite[0:img_height, x_start:x_end, :] = np.stack([img] * 3, axis=2)
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥: –∫–∞—Ä—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        interference_maps = [interference_red, interference_green, interference_blue, interference_combined]
        interference_names = ['Red', 'Green', 'Blue', 'Combined']
        
        for i, (interference_map, name) in enumerate(zip(interference_maps, interference_names)):
            if interference_map is not None:
                x_start = i * img_width
                x_end = x_start + img_width
                y_start = img_height
                y_end = y_start + img_height
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ä—Ç—É –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
                map_normalized = (interference_map - interference_map.min()) / (interference_map.max() - interference_map.min() + 1e-8)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                if i < 3:  # RGB –∫–∞–Ω–∞–ª—ã
                    colored_map = np.zeros((img_height, img_width, 3))
                    colored_map[:, :, i] = map_normalized  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ü–≤–µ—Ç–æ–≤–æ–π –∫–∞–Ω–∞–ª
                else:  # Combined
                    colored_map = plt.cm.viridis(map_normalized)[:, :, :3]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É viridis
                
                composite[y_start:y_end, x_start:x_end, :] = colored_map
        
        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ –∏ –∞–Ω–∞–ª–∏–∑
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        img_before = images[0]  # strength 0.0
        img_after = images[-1]  # strength 1.0
        
        # –†–∞–∑–Ω–æ—Å—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        diff_img = np.abs(img_after - img_before)
        diff_img = diff_img / (diff_img.max() + 1e-8)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–∏–ª—ã
        gradient_map = np.zeros((img_height, img_width, 3))
        for i in range(img_width):
            strength_val = i / img_width
            gradient_map[:, i, :] = plt.cm.plasma(strength_val)[:3]  # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç 0 –¥–æ 1
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç—Ä–µ—Ç–∏–π —Ä—è–¥
        y_start = img_height * 2
        y_end = y_start + img_height
        
        # –î–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        if len(img_before.shape) == 3:
            composite[y_start:y_end, 0:img_width, :] = img_before
        else:
            composite[y_start:y_end, 0:img_width, :] = np.stack([img_before] * 3, axis=2)
        
        # –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        if len(img_after.shape) == 3:
            composite[y_start:y_end, img_width:img_width*2, :] = img_after
        else:
            composite[y_start:y_end, img_width:img_width*2, :] = np.stack([img_after] * 3, axis=2)
        
        # –†–∞–∑–Ω–æ—Å—Ç—å
        composite[y_start:y_end, img_width*2:img_width*3, :] = diff_img
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
        composite[y_start:y_end, img_width*3:img_width*4, :] = gradient_map
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—á–∞—Å—Ç–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç—ã–º
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ uint8 –∏ —Å–æ–∑–¥–∞–µ–º PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        composite_uint8 = (np.clip(composite, 0, 1) * 255).astype(np.uint8)
        composite_img = Image.fromarray(composite_uint8)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏
        draw = ImageDraw.Draw(composite_img)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        try:
            font_large = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 40)
            font_small = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 30)
        except:
            try:
                font_large = ImageFont.load_default()
                font_small = ImageFont.load_default()
            except:
                font_large = None
                font_small = None
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä—è–¥–æ–≤
        draw.text((10, 10), "–ì—Ä–∞–¥–∏–µ–Ω—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å–∏–ª–∞: 0.0 ‚Üí 1.0)", fill=(255, 255, 255), font=font_large)
        draw.text((10, img_height + 10), "–ö–∞—Ä—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º", fill=(255, 255, 255), font=font_large)
        draw.text((10, img_height * 2 + 10), "–ê–Ω–∞–ª–∏–∑: –î–æ ‚Üí –ü–æ—Å–ª–µ ‚Üí –†–∞–∑–Ω–æ—Å—Ç—å ‚Üí –ì—Ä–∞–¥–∏–µ–Ω—Ç", fill=(255, 255, 255), font=font_large)
        
        # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä—è–¥–∞
        for i, strength in enumerate(strengths):
            x_pos = i * img_width + img_width // 2 - 30
            draw.text((x_pos, img_height - 40), f"{strength:.2f}", fill=(255, 255, 0), font=font_small)
        
        # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ä—è–¥–∞
        for i, name in enumerate(interference_names):
            x_pos = i * img_width + img_width // 2 - len(name) * 8
            draw.text((x_pos, img_height * 2 - 40), name, fill=(255, 255, 0), font=font_small)
        
        # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ —Ä—è–¥–∞
        labels = ["–î–æ", "–ü–æ—Å–ª–µ", "–†–∞–∑–Ω–æ—Å—Ç—å", "–ì—Ä–∞–¥–∏–µ–Ω—Ç"]
        for i, label in enumerate(labels):
            x_pos = i * img_width + img_width // 2 - len(label) * 8
            draw.text((x_pos, composite_height - 40), label, fill=(255, 255, 0), font=font_small)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        final_path = os.path.join(output_dir, "FINAL_NORMALIZATION_COMPOSITE.png")
        composite_img.save(final_path, quality=95)
        
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {final_path}")
        print(f"   –†–∞–∑–º–µ—Ä: {composite_width}x{composite_height}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
        print(f"     –†—è–¥ 1: –ì—Ä–∞–¥–∏–µ–Ω—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
        print(f"     –†—è–¥ 2: –ö–∞—Ä—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ (R, G, B, Combined)")
        print(f"     –†—è–¥ 3: –ê–Ω–∞–ª–∏–∑ (–î–æ/–ü–æ—Å–ª–µ/–†–∞–∑–Ω–æ—Å—Ç—å/–ì—Ä–∞–¥–∏–µ–Ω—Ç)")
        
    except ImportError as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É: {e}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ matplotlib: pip install matplotlib")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")


def demo_scene_sdf(points)::
    from path_integral_engine import (
        PathIntegralEngine, 
        PathIntegralConfig,
        QualityPreset,
        RenderingMode,
        RenderingBackend,
        create_interactive_engine,
        create_production_engine,
        create_preview_engine
    )
    import torch
    TORCH_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install torch numpy")
    TORCH_AVAILABLE = False


def demo_scene_sdf(points):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    if not hasattr(points, 'device'):
        # Fallback –¥–ª—è CPU
        return np.ones(points.shape[:-1]) * 0.5
        
    device = points.device
    
    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞
    sphere1 = torch.norm(points - torch.tensor([0.0, 0.0, 0.0], device=device), dim=-1) - 1.0
    
    # –°—Ñ–µ—Ä–∞ —Å–ø—Ä–∞–≤–∞
    sphere2 = torch.norm(points - torch.tensor([2.5, 0.0, 0.5], device=device), dim=-1) - 0.8
    
    # –°—Ñ–µ—Ä–∞ —Å–ª–µ–≤–∞
    sphere3 = torch.norm(points - torch.tensor([-2.0, 0.5, -0.5], device=device), dim=-1) - 0.6
    
    # –°—Ñ–µ—Ä–∞ —Å–≤–µ—Ä—Ö—É
    sphere4 = torch.norm(points - torch.tensor([0.0, 2.0, 0.0], device=device), dim=-1) - 0.7
    
    # –ü–ª–æ—Å–∫–æ—Å—Ç—å-–ø–æ–ª
    plane = points[..., 1] + 1.8
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
    scene = torch.minimum(
        torch.minimum(
            torch.minimum(
                torch.minimum(sphere1, sphere2), 
                sphere3
            ), 
            sphere4
        ), 
        plane
    )
    
    return scene


def save_image(img_array, filename, info, output_dir="renders"):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(output_dir, exist_ok=True)
    
    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    full_path = os.path.join(output_dir, filename)
    
    try:
        from PIL import Image
        
        if len(img_array.shape) == 3:  # RGB
            img_rgb = (img_array * 255).astype(np.uint8)
            img = Image.fromarray(img_rgb)
        else:  # Grayscale
            img_mono = (img_array * 255).astype(np.uint8)
            img = Image.fromarray(img_mono)
            
        img.save(full_path)
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {full_path}")
        print(f"   –†–∞–∑–º–µ—Ä: {img_array.shape}")
        print(f"   FPS: {info['fps']:.2f}")
        print(f"   SPP: {info['spp']}")
        print(f"   Backend: {info['backend']}")
        print(f"   –†–µ–∂–∏–º: {info['mode']}")
        print()
        
    except ImportError:
        print("‚ö†Ô∏è  PIL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        print(f"–ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_array.shape}, FPS: {info['fps']:.2f}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


def demo_basic_usage(output_dir="renders"):
    """–ë–∞–∑–æ–≤–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–≤–∏–∂–∫–∞"""
    print("üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    engine = create_interactive_engine()
    print(f"–î–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω: {engine.get_info()}")
    
    # –ü–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
    camera_positions = [
        ([0.0, 1.0, -4.0], [0.0, 0.0, 0.0], "front"),
        ([4.0, 2.0, 0.0], [0.0, 0.0, 0.0], "side"),
        ([2.0, 3.0, 2.0], [0.0, 0.0, 0.0], "angle"),
    ]
    
    for i, (cam_pos, cam_target, view_name) in enumerate(camera_positions):
        print(f"üé• –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–¥–∞ '{view_name}'...")
        
        start_time = time.time()
        img, info = engine.render(demo_scene_sdf, cam_pos, cam_target)
        render_time = time.time() - start_time
        
        filename = f"demo_basic_{view_name}.png"
        save_image(img, filename, info, output_dir)
        print(f"   –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞: {render_time:.2f}—Å\n")


def demo_quality_presets(output_dir="renders"):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("=" * 40)
    
    presets = [
        (QualityPreset.PREVIEW, "preview"),
        (QualityPreset.INTERACTIVE, "interactive"),
        (QualityPreset.PRODUCTION, "production"),
    ]
    
    camera_pos = [3.0, 2.0, -3.0]
    camera_target = [0.0, 0.0, 0.0]
    
    for preset, name in presets:
        print(f"üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–æ–π '{name}'...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = PathIntegralConfig.from_preset(preset)
        engine = PathIntegralEngine(config)
        
        start_time = time.time()
        img, info = engine.render(demo_scene_sdf, camera_pos, camera_target)
        render_time = time.time() - start_time
        
        filename = f"demo_quality_{name}.png"
        save_image(img, filename, info, output_dir)
        print(f"   –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞: {render_time:.2f}—Å")
        print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {config.width}x{config.height}")
        print(f"   SPP: {config.spp}\n")


def demo_rendering_modes(output_dir="renders"):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞"""
    print("üåà –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞")
    print("=" * 40)
    
    engine = create_interactive_engine()
    camera_pos = [2.0, 1.5, -3.0]
    camera_target = [0.0, 0.0, 0.0]
    
    # RGB —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    print("üî¥üü¢üîµ RGB –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º...")
    engine.switch_rendering_mode(RenderingMode.RGB_SPECTRAL)
    img_rgb, info_rgb = engine.render(demo_scene_sdf, camera_pos, camera_target)
    save_image(img_rgb, "demo_mode_rgb_spectral.png", info_rgb, output_dir)
    
    # –ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π —Ä–µ–∂–∏–º  
    print("‚ö´ –ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π —Ä–µ–∂–∏–º...")
    engine.switch_rendering_mode(RenderingMode.MONOCHROME)
    img_mono, info_mono = engine.render(demo_scene_sdf, camera_pos, camera_target)
    save_image(img_mono, "demo_mode_monochrome.png", info_mono, output_dir)


def demo_custom_config(output_dir="renders"):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("‚öôÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = PathIntegralConfig()
    config.width = 768
    config.height = 768
    config.spp = 32
    config.segments = 6
    config.rendering_mode = RenderingMode.RGB_SPECTRAL
    config.target_fps = 5.0  # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    config.adaptive_quality = False  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–ª–∏–Ω—ã –≤–æ–ª–Ω (–±–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞)
    config.wavelengths['red'] = 0.680    # –ë–æ–ª–µ–µ –∫—Ä–∞—Å–Ω—ã–π
    config.wavelengths['green'] = 0.520  # –ë–æ–ª–µ–µ –∑–µ–ª–µ–Ω—ã–π
    config.wavelengths['blue'] = 0.430   # –ë–æ–ª–µ–µ —Å–∏–Ω–∏–π
    
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {config.width}x{config.height}")
    print(f"  SPP: {config.spp}")
    print(f"  –°–µ–≥–º–µ–Ω—Ç—ã: {config.segments}")
    print(f"  RGB –¥–ª–∏–Ω—ã –≤–æ–ª–Ω: R={config.wavelengths['red']}Œºm, "
          f"G={config.wavelengths['green']}Œºm, B={config.wavelengths['blue']}Œºm")
    
    engine = PathIntegralEngine(config)
    
    camera_pos = [3.0, 2.5, -2.5]
    camera_target = [0.0, 0.0, 0.0]
    
    print("\nüé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
    start_time = time.time()
    img, info = engine.render(demo_scene_sdf, camera_pos, camera_target)
    render_time = time.time() - start_time
    
    save_image(img, "demo_custom_config.png", info, output_dir)
    print(f"–í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞: {render_time:.2f}—Å")


def demo_performance_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 40)
    
    camera_pos = [2.0, 1.0, -3.0]
    camera_target = [0.0, 0.0, 0.0]
    
    test_configs = [
        ("–ë—ã—Å—Ç—Ä—ã–π", QualityPreset.PREVIEW),
        ("–°—Ä–µ–¥–Ω–∏–π", QualityPreset.INTERACTIVE),
        ("–ú–µ–¥–ª–µ–Ω–Ω—ã–π", QualityPreset.PRODUCTION),
    ]
    
    results = []
    
    for name, preset in test_configs:
        config = PathIntegralConfig.from_preset(preset)
        engine = PathIntegralEngine(config)
        
        print(f"‚è±Ô∏è  –¢–µ—Å—Ç '{name}' ({config.width}x{config.height}, {config.spp} SPP)...")
        
        # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥–æ–Ω–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        times = []
        for i in range(3):
            start_time = time.time()
            img, info = engine.render(demo_scene_sdf, camera_pos, camera_target)
            render_time = time.time() - start_time
            times.append(render_time)
            
        avg_time = np.mean(times)
        fps = 1.0 / avg_time
        
        results.append((name, config.width * config.height, config.spp, avg_time, fps))
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å, FPS: {fps:.2f}")
    
    print("\nüìà –°–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print(f"{'–†–µ–∂–∏–º':<10} {'–ü–∏–∫—Å–µ–ª–∏':<10} {'SPP':<6} {'–í—Ä–µ–º—è':<8} {'FPS':<8}")
    print("-" * 50)
    for name, pixels, spp, time_val, fps in results:
        print(f"{name:<10} {pixels:<10} {spp:<6} {time_val:<8.2f} {fps:<8.2f}")


def demo_normalization_system(output_dir="renders"):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Å—Ç–æ—Ç —Ñ–æ—Ç–æ–Ω–æ–≤"""
    print("üî¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Å—Ç–æ—Ç —Ñ–æ—Ç–æ–Ω–æ–≤")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    engine = create_interactive_engine()
    
    # –í–∫–ª—é—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ 20 –∫–∞–¥—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    engine.enable_normalization(frames=20, strength=0.8)
    
    camera_pos = [3.0, 2.0, -3.0]
    camera_target = [0.0, 0.0, 0.0]
    
    print("üìä –§–∞–∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (20 –∫–∞–¥—Ä–æ–≤)...")
    
    # –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–¥—Ä—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    for frame_num in range(20):
        print(f"   –ö–∞–¥—Ä {frame_num + 1}/20", end='\r')
        
        # –ù–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        angle = frame_num * 0.1
        cam_pos = [
            3.0 * math.cos(angle),
            2.0 + 0.5 * math.sin(angle * 2),
            -3.0 * math.sin(angle)
        ]
        
        img, info = engine.render(demo_scene_sdf, cam_pos, camera_target)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        if info.get('normalization', {}).get('is_ready', False):
            print(f"\n‚úÖ –ö–∞—Ä—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞ –Ω–∞ –∫–∞–¥—Ä–µ {frame_num + 1}!")
            break
    
    print("\nüé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–∏–ª—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    strengths = [0.0, 0.5, 1.0]
    
    for strength in strengths:
        engine.set_normalization_strength(strength)
        
        img, info = engine.render(demo_scene_sdf, camera_pos, camera_target)
        
        strength_name = f"strength_{strength:.1f}".replace(".", "_")
        filename = f"demo_normalization_{strength_name}.png"
        save_image(img, filename, info, output_dir)
        
        print(f"   –°–∏–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ {strength:.1f}: {info['fps']:.2f} FPS")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    print("üåà –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏...")
    
    interference_combined = engine.get_interference_pattern('combined')
    if interference_combined is not None:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        interference_normalized = (interference_combined * 255).astype(np.uint8)
        
        try:
            from PIL import Image
            img_interference = Image.fromarray(interference_normalized)
            interference_path = os.path.join(output_dir, "interference_pattern_combined.png")
            img_interference.save(interference_path)
            print(f"‚úÖ –ö–∞—Ä—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {interference_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º RGB –∫–∞—Ä—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    for channel in ['red', 'green', 'blue']:
        pattern = engine.get_interference_pattern(channel)
        if pattern is not None:
            pattern_normalized = (pattern * 255).astype(np.uint8)
            try:
                from PIL import Image
                img_channel = Image.fromarray(pattern_normalized)
                channel_path = os.path.join(output_dir, f"interference_pattern_{channel}.png")
                img_channel.save(channel_path)
                print(f"‚úÖ –ö–∞—Ä—Ç–∞ {channel} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {channel_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã {channel}: {e}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    normalization_data_path = os.path.join(output_dir, "normalization_data.pkl")
    engine.export_normalization_data(normalization_data_path)
    
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
    norm_info = engine.get_info().get('normalization', {})
    print(f"   –ö–∞–¥—Ä–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: {norm_info.get('frames_accumulated', 0)}")
    print(f"   –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: {norm_info.get('total_frames', 0)}")
    print(f"   –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {'–î–∞' if norm_info.get('is_ready', False) else '–ù–µ—Ç'}")
    print(f"   –°–∏–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: {norm_info.get('strength', 0.0):.1f}")


def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"""
    print("\n" + "="*60)
    print("üé¨ Path Integral Engine v3.0 - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é")
    print("="*60)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:")
    print()
    print("1. üì∑ –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (3 –≤–∏–¥–∞ –∫–∞–º–µ—Ä—ã) ~4—Å–µ–∫")
    print("2. üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ (Preview/Interactive/Production) ~60—Å–µ–∫")
    print("3. üåà –†–µ–∂–∏–º—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (RGB/–ú–æ–Ω–æ—Ö—Ä–æ–º) ~2—Å–µ–∫")
    print("4. ‚öôÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ) ~15—Å–µ–∫")
    print("5. üìä –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π) ~180—Å–µ–∫")
    print("6. ÔøΩ –°–∏—Å—Ç–µ–º–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Å—Ç–æ—Ç —Ñ–æ—Ç–æ–Ω–æ–≤ (–ù–û–í–û–ï!) ~30—Å–µ–∫")
    print("7. ÔøΩüöÄ –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è (–≤—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ) ~290—Å–µ–∫")
    print("0. ‚ùå –í—ã—Ö–æ–¥")
    print()
    print("üí° –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –¥–ª—è Apple Silicon M1/M2/M3")
    print("üî¨ –í–∞—Ä–∏–∞–Ω—Ç 6 - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Ñ–æ—Ç–æ–Ω–æ–≤ –∑–∞ 100 –∫–∞–¥—Ä–æ–≤")
    print()
    
    while True:
        try:
            choice = input("–í–∞—à –≤—ã–±–æ—Ä (0-7): ").strip()
            if choice in ['0', '1', '2', '3', '4', '5', '6', '7']:
                return choice
            else:
                print("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 7.")
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            return '0'
        except EOFError:
            return '0'


def get_output_directory():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    print("\nüìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
    print("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: './renders'")
    print("2. –£–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –ø–∞–ø–∫—É")
    
    while True:
        try:
            choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
            
            if choice == '1':
                output_dir = "renders"
                break
            elif choice == '2':
                custom_dir = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ: ").strip()
                if custom_dir:
                    output_dir = custom_dir
                    break
                else:
                    print("‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –ø—É—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                    output_dir = "renders"
                    break
            else:
                print("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        except (KeyboardInterrupt, EOFError):
            print("\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: './renders'")
            output_dir = "renders"
            break
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        os.makedirs(output_dir, exist_ok=True)
        print(f"‚úÖ –ü–∞–ø–∫–∞ –≥–æ—Ç–æ–≤–∞: {os.path.abspath(output_dir)}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É {output_dir}: {e}")
        print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: './renders'")
        output_dir = "renders"
        os.makedirs(output_dir, exist_ok=True)
    
    return output_dir


def run_selected_demo(choice, output_dir):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
    if choice == '1':
        demo_basic_usage(output_dir)
    elif choice == '2':
        demo_quality_presets(output_dir)
    elif choice == '3':
        demo_rendering_modes(output_dir)
    elif choice == '4':
        demo_custom_config(output_dir)
    elif choice == '5':
        demo_performance_comparison()
    elif choice == '6':
        demo_normalization_system(output_dir)
    elif choice == '7':
        # –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
        demo_basic_usage(output_dir)
        demo_quality_presets(output_dir)
        demo_rendering_modes(output_dir)
        demo_custom_config(output_dir)
        demo_performance_comparison()
        demo_normalization_system(output_dir)
        
        print("\nüéâ –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìÅ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {os.path.abspath(output_dir)}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ Path Integral Engine v3.0 - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 50)
    
    if not TORCH_AVAILABLE:
        print("‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ PyTorch")
        return
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU
    if torch.backends.mps.is_available():
        print("‚úÖ Apple Silicon GPU (MPS) –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print("‚ö†Ô∏è  MPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∏ –ø–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        choice = show_menu()
        
        if choice == '0':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_dir = get_output_directory()
        
        print(f"\nüé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {os.path.abspath(output_dir)}")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        start_time = time.time()
        run_selected_demo(choice, output_dir)
        total_time = time.time() - start_time
        
        print(f"\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ: {os.path.abspath(output_dir)}")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
        print("\n" + "="*50)
        while True:
            try:
                repeat = input("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é? (y/n): ").strip().lower()
                if repeat in ['y', 'yes', '–¥', '–¥–∞']:
                    main()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                    break
                elif repeat in ['n', 'no', '–Ω', '–Ω–µ—Ç']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                else:
                    print("‚ö†Ô∏è  –í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –¥–∞ –∏–ª–∏ 'n' –¥–ª—è –Ω–µ—Ç")
            except (KeyboardInterrupt, EOFError):
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
